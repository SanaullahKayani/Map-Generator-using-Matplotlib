import numpy as np
import random
import matplotlib.pyplot as plt
%matplotlib inline
import networkx as nx
G = nx.Graph()
romania={'arad':['zerind','sibu','timisora'],
          'zerind':['oradas'],
          'sibu':['fagaras','rievilies'],
          'timisora':['lugoj'],
          'oradas':['sibu'],
          'fagaras':['bucharest'],
          'rievilies':['petisti','craiiove'],
          'lugoj':['mehadia'],
          'mehadia':['dobreta'],
          'dobreta':['craiiove'],
           'craiiove':['petisti'],
          'petisti':['bucharest'],
          'bucharest':[]
         }
#print(romania)
path_cost=[[('arad','sibu',140)],
            [('arad','zerind',75)],
            [('arad','timisora',118)],
            [('zerind','oradas',71)],
            [('oradas','sibu',151)],
            [('sibu','fagaras',99)],
            [('sibu','rievilies',80)],
            [('timisora','lugoj',111)],
            [('lugoj','mehadia',70)],
            [('mehadia','dobreta',75)],
            [('dobreta','craiiove',120)],
            [('craiiove','rievilies',146)],
            [('craiiove','petisti',138)],
            [('rievilies','sibu',80)],
            [('petisti','rievilies',97)],
            [('fagaras','bucharest',211)],
            [('petisti','bucharest',101)]
           ]
x=[]
j=10
k=70
x = romania.keys()
 
for i in x:
    #rint(i)
    G.add_node(i)
    G.add_node(i,pos=(j,k))
    j=random.randint(1,101)
    k=random.randint(1,101)
         
nx.draw(G, with_labels=True, font_weight='bold')    
plt.show()

pq = []
pq.append(('arad',0))
while len(pq)>0:
        nod = pq.pop(0)
        a=(nod[0])
        #print(nod)
        #child1= romania_hn.get(nod[1])
        child = romania.get(nod[0])
        #print(nod[0])
        for i in child:
            #b=i
            #print(i)
            for t in path_cost:
                for u in t:
                    #print(u)
                    b=u[0]
                    if(a==b):
                        if(i==u[1]):
                            G.add_edge(nod[0],i,weight=u[2])
                            pq.append((i,0))
                    if(nod[0]==u[1]):
                        if(i==u[0]):
                            G.add_edge(nod[0],i,weight=u[2])
                            pq.append((i,0))
                        
#G = nx.path_graph(4)
#shells = [[0], [1,2,3]]
#pos = nx.shell_layout(G, shells)            
#pos = {i:(random.randint(0,50),random.randint(0,100)) for i in range(n_nodes)}
weight=nx.get_edge_attributes(G,'weight')
pos =nx.get_node_attributes(G,'pos')
#plt.figure()

nx.draw_networkx(G, pos)
nx.draw_networkx_edge_labels(G,pos,edge_labels=weight)    
plt.show()
